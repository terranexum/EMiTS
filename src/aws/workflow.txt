Lambda-Fargate Workflow

An S3 bucket is set up to receive component files.

A Lambda function is triggered when a component file is uploaded to the S3 bucket.
The Lambda function starts an ECS task to clone the three repositories (OpenMETA, OpenROAD, and GDS2WebGL) and build their Docker images using CodeBuild.
The Docker images are stored in ECR.

Another Lambda function is triggered when the Docker images are successfully built and stored in ECR.
The Lambda function starts an ECS task on Fargate to run OpenMETA, OpenROAD, and GDS2WebGL, passing input/output files between them using S3 or EFS.

Batch is used to handle any long-running tasks, such as running OpenROAD optimizations.
Once the circuit design is complete, the final GDSII file is stored in S3.

Another Lambda function is triggered when the GDSII file is stored in S3, which generates an HTML file using GDS2WebGL to visualize the circuit design.
The HTML file is stored in an S3 bucket and made accessible on the web.

Some API calls that may be needed:
Lambda function to trigger the ECS task to clone the repositories and build the Docker images using CodeBuild.
Lambda function to trigger the ECS task on Fargate to run OpenMETA, OpenROAD, and GDS2WebGL.
Batch job to handle any long-running tasks, such as running OpenROAD optimizations.
Lambda function to generate the HTML file using GDS2WebGL to visualize the circuit design.


AWS Batch workflow

Receive component files in an S3 bucket
Trigger a Lambda function to start an ECS task to clone the three repositories (OpenMETA, OpenROAD, and GDS2WebGL) and to build their Docker images using CodeBuild
Do the above but through Batch
Once the ECS task is complete, the final output file (GDSII) is stored in an S3 bucket
A Lambda function is triggered to generate a pre-signed URL to allow the end-user to download the final GDSII file from the S3 bucket
Using AWS Batch allows for long-running processes, such as OpenROAD optimizations, to be run on EC2 instances with minimal management overhead. 
By separating out this process from the main ECS task, it allows for better scalability and reduces the likelihood of the ECS task timing out or running into resource constraints.

